qchisq(.95,21)
?stepAIC
library(lmle)
library(MASS)
?stepAIC()
shiny::runApp('Box Sync/Billie/mikePower')
", and an alpha level of", input$alpha, "will yield a power of ",output$power)
shiny::runApp('Box Sync/Billie/mikePower')
Power.calc <- function(delta, alpha, n, sd = 1){
df <- (n/2-1)*2 #split n into two groups df of each 1 is n-1 then multiply by 2 cuz 2 equal groups
quantile <- qt(alpha/2, df,lower.tail = FALSE)
prob <- pt(quantile,df,ncp = (sqrt(n/4)*delta/sd),lower.tail = FALSE)
#ncp = n/2 * 1/2 because my test assumes n is total participants
return(prob)
}
Power.calc(.5,.05,2)
Power.calc(.5,.05,20)
Power.calc(.5,.05,10)
Power.calc(.5,.05,3)
Power.calc(.5,.05,2)
Power.calc(.5,.05,3)
Power.calc(.5,.05,5)
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
shiny::runApp('Box Sync/Billie/mikePower')
install.packages(c("arm", "BH", "broom", "caret", "choroplethr", "cluster", "dendextend", "devtools", "diptest", "dplyr", "DT", "evaluate", "gdata", "highr", "Hmisc", "httr", "installr", "JM", "knitr", "lava", "lme4", "maps", "maptools", "markdown", "mclust", "mi", "mnormt", "plyr", "polspline", "pryr", "psych", "R2WinBUGS", "R6", "Rcpp", "RCurl", "rgeos", "rmarkdown", "rms", "robustbase", "roxygen2", "scales", "sp", "stringdist", "stringi", "stringr", "survival", "testthat", "VGAM", "XML"))
installr::updateR()
?updateR
installr::updateR()
installr::updateR()
?installr
updateR(keep_old_packages = F)
library(installr)
updateR(keep_old_packages = F)
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
library(shiny)
?need
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp()
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
qnorm(.2)
A <- .4
B <- 1.5
beta <- 1-.8
alpha <- 0.05
de <- 2
x1 <- 2*(qnorm(beta) + qnorm(alpha/2))^2
x2 <- (1+A)^2 * B + (1+AB)^2
x2 <- (1+A)^2 * B + (1+A*B)^2
x3 <- A*B*(log(B))^2
x1 * x2 / x3
2 * x1 * x2 / x3
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
designEffect <- 2
(((1 + A) ^ 2) * B + ((1 + A * B) ^ 2)) * designEffect / (A * B * (log(B)) ^ 2)
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
input$inputPowerA <- .2
as.data.frame <- input
input <- data.frame
()
input <- data.frame()
input$inputPowerA <- .2
input <- data.frame(nrow=1)
input$inputPowerA <- .2
input$alphaA <- .05
2 * ((qnorm(1 - input$inputPowerA) + qnorm(input$alphaA / 2)) ^ 2) * (((1 + A) ^ 2) * B + ((1 + A * B) ^ 2)) / (A * B * (log(B)) ^ 2)
A <- .4
B <- 1.5
2 * ((qnorm(1 - input$inputPowerA) + qnorm(input$alphaA / 2)) ^ 2) * (((1 + A) ^ 2) * B + ((1 + A * B) ^ 2)) / (A * B * (log(B)) ^ 2)
((qnorm(1 - input$inputPowerA) + qnorm(input$alphaA / 2)) ^ 2)
input$inputPowerA <- .8
2 * ((qnorm(1 - input$inputPowerA) + qnorm(input$alphaA / 2)) ^ 2) * (((1 + A) ^ 2) * B + ((1 + A * B) ^ 2)) / (A * B * (log(B)) ^ 2)
875*2
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
A <- .29/(1-.29)
B <- (.21/(1-.21))/A
A
B
.21/(1-.21)
.21/(1-.21)/.4
shiny::runApp('Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
1735 * .4 * 1.5 * log(1.5)^2
sqrt((1735 * .4 * 1.5 * log(1.5)^2)/(4*((1+A)^2 * B + (1+AB)^2)))
sqrt((1735 * .4 * 1.5 * log(1.5)^2)/(4*((1+A)^2 * B + (1+A*B)^2)))
sqrt((1735 * .4 * 1.5 * log(1.5)^2)/(4*((1+A)^2 * B + (1+A*B)^2)))-qnorm(.05/2)
pnorm(sqrt((1735 * .4 * 1.5 * log(1.5)^2)/(4*((1+A)^2 * B + (1+A*B)^2)))-qnorm(.05/2))
x1 <- 1735 * .4 * 1.5 * (log(1.5))^2
x2 <- 4*(((1.4)^2)*1.5 + (1+.4*1.5)^2
x2 <- 4*((1.4)^2)*1.5 + (1+.4*1.5)^2
x2 <- 4*((1.4)^2)*1.5 + (1+.4*1.5)^2
sqrt(x1/x2)
qnorm(.05/2)
source('C:\\Users\\Nick\\Box Sync\\Kelley\\ELPh\\Crossover\\ELPh Data Cleaning.R')
load("C:\\Users\\Nick\\Box Sync\\Kelley\\ELPh\\Crossover\\crossoverDataCleaning.RData")
urvAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
summary(survAI1sx.xover,  times = c(0, 1, 3, 6))
summary(survAI1msk.xover, times = c(0, 1, 3, 6))
survAI2sx  <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontSX)  ~ 1, conf.type = "log-log")
survAI2msk <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontMSK) ~ 1, conf.type = "log-log")
summary(survAI2sx,  times = c(0, 1, 3, 6))
summary(survAI2msk, times = c(0, 1, 3, 6))
survAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
summary(survAI1sx.xover,  times = c(0, 1, 3, 6))
summary(survAI1msk.xover, times = c(0, 1, 3, 6))
survAI2sx  <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontSX)  ~ 1, conf.type = "log-log")
survAI2msk <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontMSK) ~ 1, conf.type = "log-log")
summary(survAI2sx,  times = c(0, 1, 3, 6))
summary(survAI2msk, times = c(0, 1, 3, 6))
library(survival)
survAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
summary(survAI1sx.xover,  times = c(0, 1, 3, 6))
summary(survAI1msk.xover, times = c(0, 1, 3, 6))
survAI2sx  <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontSX)  ~ 1, conf.type = "log-log")
survAI2msk <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontMSK) ~ 1, conf.type = "log-log")
summary(survAI2sx,  times = c(0, 1, 3, 6))
summary(survAI2msk, times = c(0, 1, 3, 6))
library(rms)
survAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
summary(survAI1sx.xover,  times = c(0, 1, 3, 6))
summary(survAI1msk.xover, times = c(0, 1, 3, 6))
survAI2sx  <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontSX)  ~ 1, conf.type = "log-log")
survAI2msk <- survfit(Surv(time = dataAI2$monthsAI2, event = dataAI2$discontMSK) ~ 1, conf.type = "log-log")
summary(survAI2sx,  times = c(0, 1, 3, 6))
summary(survAI2msk, times = c(0, 1, 3, 6))
library(survival)
conf.type = "log-log")
survAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
source('C:/Users/Nick/Box Sync/Kelley/ELPh/Crossover/ELPh Data Cleaning.R', echo=TRUE)
survAI1sx.xover  <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontSX[dataAI1$localID %in% xoverIDs])  ~ 1,
conf.type = "log-log")
survAI1msk.xover <- survfit(Surv(time = dataAI1$monthsAI1[dataAI1$localID %in% xoverIDs],
event = dataAI1$discontMSK[dataAI1$localID %in% xoverIDs]) ~ 1,
conf.type = "log-log")
kmdata     <- merge(x = dataAI1[dataAI1$localID %in% xoverIDs, c("localID", "monthsAI1", "discontMSK")],
y = dataAI2[, c("localID", "monthsAI2", "discontMSK")], by = "localID", suffixes = c(".AI1", ".AI2"))
kmdatalong <- melt(kmdata, id.vars = c("localID"), measure.vars = c("monthsAI1", "monthsAI2"))
kmdata1    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[1], c("localID", "variable")],
y = kmdata[, c("localID", "discontMSK.AI1")], by = "localID")
kmdata2    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[2], c("localID", "variable")],
y = kmdata[, c("localID", "discontMSK.AI2")], by = "localID")
names(kmdata1)[3] <- "discontMSK"
names(kmdata2)[3] <- "discontMSK"
kmdatalong2 <- rbind(kmdata1, kmdata2)
kmdatalong  <- merge(kmdatalong, kmdatalong2, by = c("localID", "variable"))
kmdatalong$variable <- as.ordered(kmdatalong$variable)
kmsurv <- rms::npsurv(Surv(time = kmdatalong$value, event = kmdatalong$discontMSK) ~ kmdatalong$variable)
plot.new()
rms::survplot(kmsurv, xlab = "Time (Months)", lwd = 2, n.risk = T, levels.only = T, cex.labels = 2,
cex.n.risk = .8, label.curves = list(keys = "lines", label = c("First AI","Second AI")),
abbrev.label = T, times = c(1, 3, 6))
title(main = "Kaplan-Meier Estimate of Time to Discontinuation \n for MSK Symptoms, by Trial Stage (N=83)", cex = 3)
library(reshape2)
kmdata     <- merge(x = dataAI1[dataAI1$localID %in% xoverIDs, c("localID", "monthsAI1", "discontMSK")],
y = dataAI2[, c("localID", "monthsAI2", "discontMSK")], by = "localID", suffixes = c(".AI1", ".AI2"))
kmdatalong <- melt(kmdata, id.vars = c("localID"), measure.vars = c("monthsAI1", "monthsAI2"))
kmdata1    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[1], c("localID", "variable")],
y = kmdata[, c("localID", "discontMSK.AI1")], by = "localID")
kmdata2    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[2], c("localID", "variable")],
y = kmdata[, c("localID", "discontMSK.AI2")], by = "localID")
names(kmdata1)[3] <- "discontMSK"
names(kmdata2)[3] <- "discontMSK"
kmdatalong2 <- rbind(kmdata1, kmdata2)
kmdatalong  <- merge(kmdatalong, kmdatalong2, by = c("localID", "variable"))
kmdatalong$variable <- as.ordered(kmdatalong$variable)
kmsurv <- rms::npsurv(Surv(time = kmdatalong$value, event = kmdatalong$discontMSK) ~ kmdatalong$variable)
plot.new()
rms::survplot(kmsurv, xlab = "Time (Months)", lwd = 2, n.risk = T, levels.only = T, cex.labels = 2,
cex.n.risk = .8, label.curves = list(keys = "lines", label = c("First AI","Second AI")),
abbrev.label = T, times = c(1, 3, 6))
title(main = "Kaplan-Meier Estimate of Time to Discontinuation \n for MSK Symptoms, by Trial Stage (N=83)", cex = 3)
summary(kmsurv)
kmsurv
kmdata     <- merge(x = dataAI1[dataAI1$localID %in% xoverIDs, c("localID", "monthsAI1", "discontSX")],
y = dataAI2[, c("localID", "monthsAI2","discontSX")], by = "localID", suffixes = c(".AI1", ".AI2"))
kmdatalong <- melt(kmdata, id.vars = c("localID"), measure.vars = c("monthsAI1", "monthsAI2"))
kmdata1    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[1], c("localID", "variable")],
y = kmdata[, c("localID", "discontSX.AI1")], by = "localID")
kmdata2    <- merge(x = kmdatalong[kmdatalong$variable == levels(kmdatalong$variable)[2], c("localID", "variable")],
y = kmdata[, c("localID", "discontSX.AI2")], by = "localID")
names(kmdata1)[3] <- "discontSX"
names(kmdata2)[3] <- "discontSX"
kmdatalong2 <- rbind(kmdata1, kmdata2)
kmdatalong  <- merge(kmdatalong, kmdatalong2, by = c("localID", "variable"))
kmdatalong$variable <- as.ordered(kmdatalong$variable)
kmsurv <- rms::npsurv(Surv(time = kmdatalong$value, event = kmdatalong$discontSX) ~ kmdatalong$variable)
plot.new()
rms::survplot(kmsurv, xlab = "Time (Months)", lwd = 2, n.risk = T, levels.only = T, cex.labels = 2,
cex.n.risk = .8, label.curves = list(keys = "lines", label = c("First AI","Second AI")),
abbrev.label = T, times = c(1, 3, 6))
title(main = "Kaplan-Meier Estimate of Time to Discontinuation \n for MSK Symptoms, by Trial Stage (N=83)", cex = 3)
kmsurv
1735 * .4 * 1.5 * log(1.5)^2
x1 <- 1735 * .4 * 1.5 * log(1.5)^2
x2 <- 4 * (1.4)^2 * B + (1+.4*1.5)^2
x2 <- 4 * (1.4)^2 * 1.5 + (1+.4*1.5)^2
x2
x1
sqrt(x1/x2)
sqrt(x1/x2) - qnorm(.025)
sqrt(x1/x2) + qnorm(.025)
pnorm(sqrt(x1/x2) + qnorm(.025))
.4 & 1.5
.4 * 1.5
x2
x2 <- 4 * ((1.4)^2 * 1.5 + (1.6)^2)
x3
x2
pnorm(sqrt(x1/x2) + qnorm(.025))
source('C:/Users/Nick/Box Sync/Kelley/ELPh/Crossover/Crossover Data Analysis.R', echo=TRUE)
shiny::runApp('C:/Users/Nick/Box Sync/Kelley/Binary Outcome SMART/SMARTsize')
setwd("C:/Users/Nick/Box Sync/Kelley/Binary Outcome SMART/SMARTsize")
shiny::runApp()
shiny::runApp()
